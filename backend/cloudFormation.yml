Resources:
  ProvincesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "ProvincesTable"
      AttributeDefinitions:
        - AttributeName: "province"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "province"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  UsersTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "UsersTable"
      AttributeDefinitions:
        - AttributeName: "username"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "username"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  BookingsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "BookingsTable"
      AttributeDefinitions:
        - AttributeName: "bookingId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "bookingId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  InsertDataFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: "term-assignment-backend-bucket"
        S3Key: "insertData.zip"
      FunctionName: "InsertDataFunction"
      Handler: "index.insertData"
      Role: "arn:aws:iam::041159192901:role/LabRole"
      Runtime: "nodejs18.x"
      Environment:
        Variables:
          region: "us-east-1"
          tableName1: "ProvincesTable"
          tableName2: "UsersTable"

  MySchedule:
    Type: "AWS::Scheduler::Schedule"
    Properties:
      ScheduleExpression: "at(2023-07-18T17:24:00)" # time change
      ScheduleExpressionTimezone: "America/Halifax"
      FlexibleTimeWindow:
        Mode: "OFF"
      State: "ENABLED"
      Target:
        Arn:
          Fn::GetAtt:
            - InsertDataFunction
            - Arn
        RoleArn: "arn:aws:iam::041159192901:role/LabRole"

  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Fn::GetAtt:
          - InsertDataFunction
          - Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - MySchedule
          - Arn

  RegisterQueueNew:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "RegisterQueueNew"

  BookingQueueNew:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "BookingQueueNew"

  BookingNotificationTopicNew:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "BookingNotificationNew"

  BackendLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: "term-assignment-backend-bucket"
        S3Key: "vaccineBackend.zip"
      FunctionName: "BackendLambdaFunction"
      Handler: "index.handler"
      Role: "arn:aws:iam::041159192901:role/LabRole"
      Runtime: "nodejs18.x"
      Environment:
        Variables:
          region: "us-east-1"
          REGISTERED_QUEUE_URL: 
            Ref: RegisterQueueNew
          BOOKING_QUEUE_URL: 
            Ref: BookingQueueNew
          TOPIC_ARN: 
            Ref: BookingNotificationTopicNew

  MyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyApi
      BinaryMediaTypes:
        - "*/*"

  MyApiRootResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: MyApi
      PathPart: "{proxy+}"
      ParentId:
        Fn::GetAtt: [MyApi, RootResourceId]

  MyApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: MyApi
      ResourceId:
        Ref: MyApiRootResource
      HttpMethod: ANY
      AuthorizationType: NONE # <-- Add this line
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambdaFunction.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH

  MyApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - MyApiRootMethod
    Properties:
      RestApiId: 
        Ref: MyApi
      StageName: v1

  BackendLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt: [BackendLambdaFunction, Arn]
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/*/*

  MyBeanstalkApp:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: my-beanstalk-app

  MyBeanstalkEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      EnvironmentName: my-beanstalk-environment
      ApplicationName: 
        Ref: MyBeanstalkApp
      SolutionStackName: 64bit Amazon Linux 2 v3.5.9 running Docker
      OptionSettings:
      - Namespace: aws:elasticbeanstalk:environment:proxy
        OptionName: ProxyServer
        Value: nginx
      - Namespace: "aws:elasticbeanstalk:application:environment"
        OptionName: "API_URL"
        Value: 
          "Fn::Sub": "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/v1"
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value: LabInstanceProfile
      - Namespace: "aws:elasticbeanstalk:environment"
        OptionName: "ServiceRole"
        Value: 'arn:aws:iam::041159192901:role/LabRole'
      - Namespace: "aws:autoscaling:launchconfiguration"
        OptionName: "InstanceType"
        Value: 't3.micro,t3.small'      
      VersionLabel: 
        Ref: MyBeanstalkVersion

  MyBeanstalkVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: 
        Ref: MyBeanstalkApp
      Description: My application version
      SourceBundle:
        S3Bucket: term-assignment-backend-bucket
        S3Key: myapp.zip


Outputs:
  ApiGatewayEndpoint:
    Description: The URL of the API Gateway endpoint
    Value: 
      Fn::Sub: "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/v1"



